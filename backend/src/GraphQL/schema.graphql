type User {
  id: ID!
  username: String!
}

type UserDetail {
  userDetails: UserDetails
  status: Status
}

type UserDetails {
  followers: Int
  username: String
  email: String
  icon: String
  youtube: String
  github: String
  linkedin: String
  about: String
}

type Status {
  message: String
  code: Int
}

type AuthResult {
  username: String
  iconUrl: String
  message: String
  code: Int
}

input AuthDetailInput {
  username: String!
  password: String!
}

input updateUserDetails {
  icon: String
  email: String
  youtube: String
  github: String
  linkedin: String
  about: String
}

input TaskDetails {
  taskName: String!
  language: String!
  course: String!
  module: String!
  videoLink: String
  githubLink: String!
}

input TaskDetailGlobal {
  taskName: String!
}

type TasksDetailGlobal {
  result: String
  status: Status
}


input TaskSingleId {
  id: String!
}

type TaskSingleDetails {
  userDetails: User
  taskName: String
  taskId: String
  icon: String
  content: String
  like: Boolean
  follow: Boolean
  comments: String
  status: Status!
}

input CommentDetails {
  id: String!
  text: String!
}

type CreateCommentDetails {
  commentDetails: String
  status: Status!
}

type IndexTop10 {
  python: String!
  javascript: String!
  csharp: String!
  java: String!
  status: Status!
}

type Query {
  getUser: UserDetail
  getToken: AuthResult!
  getTaskGlobal(input: TaskDetailGlobal!): TasksDetailGlobal!
  getTaskSingleDetails(input: TaskSingleId): TaskSingleDetails!
  getIndexTop10: IndexTop10!
}

type Mutation {
  register(input: AuthDetailInput!): AuthResult!
  login(username: String!, password: String!): AuthResult!
  logout: Status!
  updateUser(input: updateUserDetails!): Status!
  deleteUser: Status!
  uploadTask(input: TaskDetails!): Status!
  createComment(input: CommentDetails!): CreateCommentDetails!
  editComment(input: CommentDetails!): Status!
  deleteComment(input: TaskSingleId!): Status!
}
