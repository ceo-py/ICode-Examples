type User {
  id: ID!
  username: String!
}

type UserDetail {
  userDetails: UserDetails
  status: Status
}

type UserDetails {
  followers: Int
  username: String
  email: String
  icon: String
  youtube: String
  github: String
  linkedin: String
  about: String
}

type Status {
  message: String
  code: Int
}

type AuthResult {
  username: String
  iconUrl: String
  message: String
  code: Int
}

input AuthDetailInput {
  username: String!
  password: String!
}

input updateUserDetails {
  icon: String
  email: String
  youtube: String
  github: String
  linkedin: String
  about: String
}

input TaskDetails {
  taskName: String!
  language: String!
  course: String!
  module: String!
  videoLink: String
  githubLink: String!
  project: Boolean
  taskId: String
}

type TaskDetailsForUpdate {
  taskName: String
  language: String
  course: String
  module: String
  videoLink: String
  githubLink: String
  status: Status!
}

input TaskDetailGlobal {
  taskName: String!
}

type TasksDetailGlobal {
  result: String
  status: Status
}

input TaskSingleId {
  id: String!
  toFollowId: String
}

type TaskSingleDetails {
  userDetails: User
  taskName: String
  taskId: String
  icon: String
  content: String
  project: String
  like: Boolean
  likeCounter: Int
  follow: Boolean
  followCounter: Int
  comments: String
  video: String
  status: Status!
}

input CommentDetails {
  id: String!
  text: String!
}

type CreateCommentDetails {
  commentDetails: String
  status: Status!
}

type IndexTop20 {
  python: String!
  javascript: String!
  csharp: String!
  java: String!
  cpp: String!
  totalSolutions: String!
  totalVIdeoTutorial: String!
  status: Status!
}

input CreateReportInput {
  idReportType: String!
  typeReport: String!
  reportContent: String!
}

input getUserHomeUsername {
  username: String!
}

type getUserHomeDetails {
  details: UserDetails
  totalSolutions: Int
  languages: IndexTop20!
  follower: Boolean
  userId: String
}

input UsernameAndEmail {
  username: String!
  email: String!
}

input resetPasswordInput {
  token: String!
  password: String!
}

input getModuleExamplesInput {
  language: String!
  course: String!
  module: String!
}

type getModuleExamplesType {
  status: Status!
  result: String!
}

input getTaskProjectFileInput {
  url: String!
}

type TaskProjectFile {
  content: String!
  status: Status!
}

type reportDetails {
  result: String
  status: Status!
}

type commentNotificationDetails {
  result: String
  status: Status!
}

type FollowNotification {
  result: String
  status: Status!
}

type LikeNotification {
  result: String
  status: Status!
}

type Query {
  getUser: UserDetail
  getToken: AuthResult!
  getTaskGlobal(input: TaskDetailGlobal!): TasksDetailGlobal!
  getTaskSingleDetails(input: TaskSingleId): TaskSingleDetails!
  getTaskDetailsForUpdate(input: TaskSingleId): TaskDetailsForUpdate!
  getIndexTop20: IndexTop20!
  getUserHome(input: getUserHomeUsername!): getUserHomeDetails!
  getUsernameAndEmail(input: UsernameAndEmail!): Status!
  getModuleExamples(input: getModuleExamplesInput!): getModuleExamplesType!
  getTaskProjectFile(input: getTaskProjectFileInput!): TaskProjectFile!
  getReport: reportDetails!
  getCommentNotification: commentNotificationDetails!
  getFollowNotification: FollowNotification!
  getLikeNotification: LikeNotification!
}

type Mutation {
  register(input: AuthDetailInput!): AuthResult!
  login(username: String!, password: String!): AuthResult!
  logout: Status!
  updateUser(input: updateUserDetails!): Status!
  deleteUser: Status!
  uploadTask(input: TaskDetails!): Status!
  updateTask(input: TaskDetails!): Status!
  createComment(input: CommentDetails!): CreateCommentDetails!
  editComment(input: CommentDetails!): Status!
  deleteComment(input: TaskSingleId!): Status!
  likeTask(input: TaskSingleId!): Status!
  deleteTask(input: TaskSingleId!): Status!
  followUser(input: TaskSingleId!): Status!
  createReport(input: CreateReportInput!): Status!
  resetPassword(input: resetPasswordInput!): Status!
}
