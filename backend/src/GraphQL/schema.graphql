type User {
  _id: ID!
  username: String!
}

type UserDetail {
  userDetails: UserDetails
  status: Status
}

type UserDetails {
  followers: Int
  username: String
  email: String
  icon: String
  youtube: String
  github: String
  linkedin: String
  about: String
}

type Status {
  message: String
  code: Int
}

type AuthResult {
  username: String
  iconUrl: String
  message: String
  code: Int
}

input AuthDetailInput {
  username: String!
  password: String!
}

input updateUserDetails {
  icon: String
  email: String
  youtube: String
  github: String
  linkedin: String
  about: String
}

input TaskDetails {
  taskName: String!
  language: String!
  course: String!
  module: String!
  videoLink: String
  githubLink: String!
}

type Query {
  getUser: UserDetail
  getToken: AuthResult!
}

type Mutation {
  register(input: AuthDetailInput!): AuthResult!
  login(username: String!, password: String!): AuthResult!
  logout: Status!
  updateUser(input: updateUserDetails!): Status!
  deleteUser: Status!
  uploadTask(input: TaskDetails!): Status!
}
